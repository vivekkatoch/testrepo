<?php
//impliment hook_mail

function e_mail_mail($key,&$message,$params) {
  global $user;
  $language = language_default();
  
   // Each message is associated with a language, which may or may not be the
  // current user's selected language, depending on the type of e-mail being
  // sent. This $options array is used later in the t() calls for subject
  // and body to ensure the proper translation takes effect.
  
  switch ($key) {
    // Send a simple message from the contact form.
  case 'contact_message' :
  $message = ''; 
    $message['subject'] = t('E-mail sent from @site-name', array('@site-name' => variable_get('site_name', 'Drupal')));
    // Note that the message body is an array, not a string.
      $message['body'][] = t('@name sent you the following message:', array('@name' => $user->name));
      // Because this is just user-entered text, we do not need to translate it.
      // Since user-entered text may have unintentional HTML entities in it like
      // '<' or '>', we need to make sure these entities are properly escaped,
      // as the body will later be transformed from HTML to text, meaning
      // that a normal use of '<' will result in truncation of the message.
      $message['body'][] = check_plain($params['message']);
      /*print_r($message);
      die();*/
      break;
  }
}


function e_mail_mail_send($form_values){
  $module = 'e_mail';
  $key = 'contact_message';
  $to = $form_values['url'];
  $from = variable_get('site_mail', 'vivekkatoch111@gmail.com');

  // "params" loads in additional context for email content completion in
  // hook_mail(). In this case, we want to pass in the values the user entered
  // into the form, which include the message body in $form_values['message'].
  $params = $form_values;

  // The language of the e-mail. This will one of three values:
  // - user_preferred_language(): Used for sending mail to a particular website
  //   user, so that the mail appears in their preferred language.
  // - global $language: Used when sending a mail back to the user currently
  //   viewing the site. This will send it in the language they're currently
  //   using.
  // - language_default(): Used when sending mail to a pre-existing, 'neutral'
  //   address, such as the system e-mail address, or when you're unsure of the
  //   language preferences of the intended recipient.
  //
  // Since in our case, we are sending a message to a random e-mail address that
  // is not necessarily tied to a user account, we will use the site's default
  // language.
  $language = language_default();

  // Whether or not to automatically send the mail when drupal_mail() is
  // called. This defaults to TRUE, and is normally what you want unless you
  // need to do additional processing before drupal_mail_send() is called.
  $send = TRUE;
  // Send the mail, and check for success. Note that this does not guarantee
  // message delivery; only that there were no PHP-related issues encountered
  // while sending.
  $result = drupal_mail($module, $key, $to, $language, $params, $from, $send);
  if ($result['result'] == TRUE) {
     drupal_set_message(t('Your message has been sent.'));
  }
  else {
    drupal_set_message(t('There was a problem sending your message and it was not sent.'), 'error');
  }

}
/**
* impliment hook_menu
*/
function e_mail_menu() {
  $items['e_mail'] = array(
    'title' => 'e_mail',
    'description' => 'this module only use for  send mails.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('send_e_mail'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
    );
return $items;
}

// callback function
function send_e_mail($form,&$form_state) {
  $form['url'] = array(
    '#title'=> 'To',
    '#type' => 'textfield',
    '#size' => 40,
    '#recquried' => true,
    '#attributes' => array(
      'placeholder' => t('enter valid e-mail address'),
      )
    );
  $form['subject'] = array(
    '#title' => 'subject',
    '#type' => 'textfield',
    '#size' => 40,
    '#recquried' => TRUE,  
    );
  $form['body'] = array(
    '#title' => 'Body',
    '#type' => 'textarea',
    '#rows' => 10,
    '#cols' => 60
    );
  $form['attachments']  = array(
    '#title' => 'atachments',
    '#type' => 'file'
    );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'send',
    
        );
  
return $form;

} 
function send_e_mail_validate($form, &$form_state) {
  if (!valid_email_address($form_state['values']['url'])) {
    form_set_error('url', t('That e-mail address is not valid.'));
  }
}

function send_e_mail_submit($form, &$form_state) {
  e_mail_mail_send($form_state['values']);
}


